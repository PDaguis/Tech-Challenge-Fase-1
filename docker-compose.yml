services:
  fase1.api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Release
      - ASPNETCORE_HTTP_PORTS=4000
      - ASPNETCORE_HTTPS_PORTS=4001
      - ASPNETCORE_Kestrel__Certificates__Default__Password=123
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/fase1.pfx
    container_name: fase1.api
    image: fase1.api
    build:
      context: .
      dockerfile: ./Fase1.API/Dockerfile
    ports:
      - "4000:4000"
      - "4001:4001"
    networks:
      - fase1_network
    volumes:
      - ~/.aspnet/https:/https:ro
    depends_on:
      - db.server
        # condition: service_healthy

  db.server:
    image: "mcr.microsoft.com/mssql/server:2022-latest"
    container_name: db.server
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=!Q@W3e4r**
    volumes:
      - 'D:\Estudos\FIAP\TechChallenge\Volumes\Database:/var/opt/mssql/data'
    networks:
      - fase1_network

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SERVER_ROOT_URL=http://my.grafana.server/
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    networks:
      - fase1_network
    ports:
      - "3000:3000"
    volumes:
      - 'D:\Estudos\FIAP\TechChallenge\Volumes\Grafana:/var/lib/grafana'

  prometheus:
    build:
      context: ./prometheus
      dockerfile: Dockerfile
    image: prometheus-local
    restart: always
    ports:
      - "9090:9090"
    networks:
      - fase1_network
    volumes:
      - 'D:\Estudos\FIAP\TechChallenge\Volumes\Prometheus:/data'

networks:
  fase1_network:

  # healthcheck:
  #   test: /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "!Q@W3e4r**" -Q "SELECT 1" -b -o /dev/null
  #   interval: 10s
  #   timeout: 3s
  #   retries: 10
  #   start_period: 10s
